// Code generated by protoc-gen-go.
// source: metrics.proto
// DO NOT EDIT!

/*
Package model is a generated protocol buffer package.

It is generated from these files:
	metrics.proto

It has these top-level messages:
	ClientEventData
	ClientEventUploadRequest
	KeyValuePair
	ErrorResponse
	HeartBeat
*/
package model

import proto "github.com/golang/protobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

// The event type enum:
type ClientEventType int32

const (
	ClientEventType_UNKNOWN         ClientEventType = 1
	ClientEventType_USER_REGISTERED ClientEventType = 2
)

var ClientEventType_name = map[int32]string{
	1: "UNKNOWN",
	2: "USER_REGISTERED",
}
var ClientEventType_value = map[string]int32{
	"UNKNOWN":         1,
	"USER_REGISTERED": 2,
}

func (x ClientEventType) Enum() *ClientEventType {
	p := new(ClientEventType)
	*p = x
	return p
}
func (x ClientEventType) String() string {
	return proto.EnumName(ClientEventType_name, int32(x))
}
func (x *ClientEventType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ClientEventType_value, data, "ClientEventType")
	if err != nil {
		return err
	}
	*x = ClientEventType(value)
	return nil
}

// Representing a single event.
type ClientEventData struct {
	// Core event attributes:
	EventId   *string          `protobuf:"bytes,1,req,name=event_id" json:"event_id,omitempty"`
	EventType *ClientEventType `protobuf:"varint,2,req,name=event_type,enum=model.ClientEventType" json:"event_type,omitempty"`
	Timestamp *int64           `protobuf:"varint,3,req,name=timestamp" json:"timestamp,omitempty"`
	// arbitrary data
	Data *string `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
	// allow arbitrary key-value pairs
	KvPair           []*KeyValuePair `protobuf:"bytes,5,rep,name=kv_pair" json:"kv_pair,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *ClientEventData) Reset()         { *m = ClientEventData{} }
func (m *ClientEventData) String() string { return proto.CompactTextString(m) }
func (*ClientEventData) ProtoMessage()    {}

func (m *ClientEventData) GetEventId() string {
	if m != nil && m.EventId != nil {
		return *m.EventId
	}
	return ""
}

func (m *ClientEventData) GetEventType() ClientEventType {
	if m != nil && m.EventType != nil {
		return *m.EventType
	}
	return ClientEventType_UNKNOWN
}

func (m *ClientEventData) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *ClientEventData) GetData() string {
	if m != nil && m.Data != nil {
		return *m.Data
	}
	return ""
}

func (m *ClientEventData) GetKvPair() []*KeyValuePair {
	if m != nil {
		return m.KvPair
	}
	return nil
}

// The message uploaded to the server - containing multiple events
type ClientEventUploadRequest struct {
	RequestId *string `protobuf:"bytes,1,req,name=request_id" json:"request_id,omitempty"`
	// The clients device type (Android, iPhone etc.)
	DeviceType *string `protobuf:"bytes,2,req,name=device_type" json:"device_type,omitempty"`
	// The events being uploaded
	Events           []*ClientEventData `protobuf:"bytes,3,rep,name=events" json:"events,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *ClientEventUploadRequest) Reset()         { *m = ClientEventUploadRequest{} }
func (m *ClientEventUploadRequest) String() string { return proto.CompactTextString(m) }
func (*ClientEventUploadRequest) ProtoMessage()    {}

func (m *ClientEventUploadRequest) GetRequestId() string {
	if m != nil && m.RequestId != nil {
		return *m.RequestId
	}
	return ""
}

func (m *ClientEventUploadRequest) GetDeviceType() string {
	if m != nil && m.DeviceType != nil {
		return *m.DeviceType
	}
	return ""
}

func (m *ClientEventUploadRequest) GetEvents() []*ClientEventData {
	if m != nil {
		return m.Events
	}
	return nil
}

// The message for key value pairs
type KeyValuePair struct {
	Key              *string `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Value            *string `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *KeyValuePair) Reset()         { *m = KeyValuePair{} }
func (m *KeyValuePair) String() string { return proto.CompactTextString(m) }
func (*KeyValuePair) ProtoMessage()    {}

func (m *KeyValuePair) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *KeyValuePair) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

// The message to send as the error response payload if something goes wrong
type ErrorResponse struct {
	Code             *string `protobuf:"bytes,1,req,name=code" json:"code,omitempty"`
	ErrorMessage     *string `protobuf:"bytes,2,opt,name=error_message" json:"error_message,omitempty"`
	Description      *string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ErrorResponse) Reset()         { *m = ErrorResponse{} }
func (m *ErrorResponse) String() string { return proto.CompactTextString(m) }
func (*ErrorResponse) ProtoMessage()    {}

func (m *ErrorResponse) GetCode() string {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return ""
}

func (m *ErrorResponse) GetErrorMessage() string {
	if m != nil && m.ErrorMessage != nil {
		return *m.ErrorMessage
	}
	return ""
}

func (m *ErrorResponse) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

// The message to check if server is up and running
type HeartBeat struct {
	Status           *string `protobuf:"bytes,1,req,name=status" json:"status,omitempty"`
	Timestamp        *string `protobuf:"bytes,2,req,name=timestamp" json:"timestamp,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *HeartBeat) Reset()         { *m = HeartBeat{} }
func (m *HeartBeat) String() string { return proto.CompactTextString(m) }
func (*HeartBeat) ProtoMessage()    {}

func (m *HeartBeat) GetStatus() string {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return ""
}

func (m *HeartBeat) GetTimestamp() string {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return ""
}

func init() {
	proto.RegisterEnum("model.ClientEventType", ClientEventType_name, ClientEventType_value)
}
